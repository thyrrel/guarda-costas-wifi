"// Conte√∫do para lib/core/agent/simulated_agent_service.dart\nimport 'dart:async';\nimport 'dart:convert';\nimport 'dart:math';\nimport 'dart:io';\nimport 'package:shelf/shelf.dart';\nimport 'package:shelf/shelf_io.dart' as shelf_io;\nimport 'package:shelf_router/shelf_router.dart';\nimport 'package:guarda_costas_wifi/data/models/network_device_model.dart';\nimport 'package:guarda_costas_wifi/core/enums/device_type.dart';\n\nclass SimulatedAgentService {\n  HttpServer? _server;\n  final _logController = StreamController<String>.broadcast();\n  final List<NetworkDeviceModel> _devices = [];\n  final Random _random = Random();\n\n  Stream<String> get logStream => _logController.stream;\n\n  SimulatedAgentService() {\n    _generateInitialDevices();\n  }\n\n  void _log(String message) {\n    final timestamp = DateTime.now().toIso8601String();\n    _logController.add('[\$timestamp] \$message');\n  }\n\n  void _generateInitialDevices() {\n    _devices.add(_createFakeDevice('192.168.1.1', 'TP-Link Router', 'TP-Link', DeviceType.ROUTER));\n    _devices.add(_createFakeDevice('192.168.1.101', 'Samsung Phone', 'Samsung', DeviceType.PHONE));\n    _devices.add(_createFakeDevice('192.168.1.104', 'MacBook Pro', 'Apple, Inc.', DeviceType.LAPTOP));\n    _devices.add(_createFakeDevice('192.168.1.110', 'LG Smart TV', 'LG Electronics', DeviceType.TV));\n  }\n\n  NetworkDeviceModel _createFakeDevice(String ip, String name, String manufacturer, DeviceType type) {\n    final mac = List.generate(6, (_) => _random.nextInt(256).toRadixString(16).padLeft(2, '0')).join(':').toUpperCase();\n    return NetworkDeviceModel(\n      id: mac,\n      ipAddress: ip,\n      macAddress: mac,\n      name: name,\n      manufacturer: manufacturer,\n      type: type,\n      isBlocked: false,\n      isFavorite: false,\n      firstSeen: DateTime.now().subtract(Duration(days: _random.nextInt(30))),\n      lastSeen: DateTime.now(),\n    );\n  }\n\n  Future<void> start() async {\n    if (_server != null) {\n      _log('Agent already running.');\n      return;\n    }\n    final router = Router();\n    router.get('/devices', (Request request) {\n      final deviceListJson = _devices.map((d) => d.toJson()).toList();\n      return Response.ok(jsonEncode(deviceListJson), headers: {'Content-Type': 'application/json'});\n    });\n    router.post('/block/<mac>', (Request request, String mac) {\n      final device = _devices.firstWhere((d) => d.macAddress == mac, orElse: () => _createFakeDevice('', '', '', DeviceType.UNKNOWN));\n      if (device.id != mac) return Response.notFound('Device not found');\n      device.isBlocked = true;\n      _log('Blocked device: \$mac');\n      return Response.ok('Device \$mac blocked');\n    });\n    router.post('/unblock/<mac>', (Request request, String mac) {\n      final device = _devices.firstWhere((d) => d.macAddress == mac, orElse: () => _createFakeDevice('', '', '', DeviceType.UNKNOWN));\n      if (device.id != mac) return Response.notFound('Device not found');\n      device.isBlocked = false;\n      _log('Unblocked device: \$mac');\n      return Response.ok('Device \$mac unblocked');\n    });\n    try {\n      _server = await shelf_io.serve(router, 'localhost', 8080);\n      _log('Agent started on http://\${_server!.address.host}:\${_server!.port}');\n    } catch (e) {\n      _log('Error starting agent: \$e');\n    }\n  }\n\n  Future<void> stop() async {\n    await _server?.close(force: true);\n    _server = null;\n    _log('Agent stopped.');\n  }\n\n  void simulateNewDevice() {\n    if (_server == null) {\n      _log('Cannot simulate new device, agent is not running.');\n      return;\n    }\n    final newDevice = _createFakeDevice('192.168.1.\${150 + _random.nextInt(50)}', 'New IoT Device', 'Unknown', DeviceType.IOT_GENERIC);\n    _devices.add(newDevice);\n    _log('Simulated new device connected: \${newDevice.name} (\${newDevice.ipAddress})');\n  }\n\n  void dispose() {\n    _logController.close();\n    stop();\n  }\n}"